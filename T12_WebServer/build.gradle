plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    implementation("ch.qos.logback:logback-classic")
    implementation("com.google.code.gson:gson")

    implementation 'org.hibernate:hibernate-core'
    implementation 'com.h2database:h2'

    implementation("org.eclipse.jetty:jetty-server")
    implementation("javax.servlet:javax.servlet-api:3.1.0")
    implementation("org.eclipse.jetty:jetty-webapp")
    implementation("org.eclipse.jetty:jetty-security")
    implementation("org.freemarker:freemarker")

    testImplementation("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testImplementation("org.assertj:assertj-core")
    testImplementation("org.mockito:mockito-junit-jupiter")
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}


compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.with {
        encoding = 'UTF-8'
    }
}